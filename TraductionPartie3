The data of travelling time between two geographical points on the globe are extremely rich and can be obtained e.g. through a googlepmaps API,
by sending a request in form of a URL, in which information such as city of departure, city of arrival, means of transportation (railway or automobile)
and travelling date should be specified.  
  
For the reason that as users of the free version of this service we are only allowed to initiate requests with a very limited numbers of cities of departure and 
arrival (10 at a time), it is necessary to automize the procedure of data acquisition. In order to do this we've written a program in Python which,
based on a series of French cities numbered after their population size, chooses at each time a different range of departure and arrivial cities, indicates
as well the transport means and date that we need, returns finally the URL of right format including this information which can be accepted by the Google API. 
Once we get the reponses to our requests in the form of a .json file, we then feed it to another Python program which in its turn decodes the travelling time
of each of the responses
given a number of departure city, a number of arrival city, a transpotation means and a date.  

The number of journeys to be treated in our problem increases at a square speed as that of the cities we will consider. Thus, it's simply impossible to
take into account all places that one can name all over the country. However, we still would like to enable a single query of such kind initiated
by the user. For exemple, we could let the user to enter in a field an arbitrary place of his choice in order to obtain its accessibility.

### 3.2 Visualization structure

The visualization of cities accessibility starts in the first place with a synthetic view: a topographic map of France, where "mountains" represent cities
that are easier to access in general and valleys the ones who have a lower mean accessibility.  
  
The main part of the visualization takes the form of a national map as well. However, here, the user is asked to position his cursor over a city.
This action will trigger off a coloration of the maps, whether in gradually changing gray or in contour blocks, as being shown in the figure, where
the shade of the color represents the travelling time from other places of France to this city (or the other way round from this city to other places).
The advantages to use a colored map in our visualization are here very clear: one can not only rapidly grasp the accessiblity of other places in France
with respect to this city, but the comparison of the distances in terms of travelling time to the geographical ones is also immediate.
It is noteworthy as well that we offer the user two options in the visualization: he could switch between railway and automobile as transportation means and between
summer and winter as the season that the journey should take place, for the reason that depending on the month of a year, the SNCF timtable and tha road condition of the highways could also vary.
Plus, we give the user the possiblity to select both of the tranportation means. In that case, the map will be displayed with two colors,
each of them representing respectively train or car, indicating the quicker way to get to a place. Again, we find such representation with a colored map very attractive, in the way that
it could bring immediately the competitivity of both transportations means to light.


### 3.3 Inplementation 
In this project, the javascript library d3.js will be our top priority as a visualizing tool, 
not only for its high compatibility with geodata, but also for the wide variety it offers in terms of graphical expressivity of a map. 
As a result, among all technique details, our first concern will be to select the appropriate d3 template which could be as suitable as possible for our data type.
For this reason, our choice could go for a topographic map, which allows us to manipulate the average accessibilities of the cities directly. It could
also be a voronoi map, as each cell can represents roughly a French Commune so that it will make it easier to extend the pointwise distances to the whole plane.

The second useful thought which could possibly rend our visualization even more user-friendly is, once a city is selected by the user, if we will connnect 
other main French cities with this one using a arc, just like an airway course map with the travelling time in number in the middle over each arc. Moreover, we could  
eventually consider to animate them so that an arc joining faster the selected city represents a shorter travelling time etc.

Since we would like to construct a continous color map instead of only colored cities, but on the other hand it is impossible to include every place of France
in our culcalation of distances like we explained above, a solution of approximation need to be found for less populated cities and villages. For instance, ...

